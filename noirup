#!/usr/bin/env bash
set -e

NARGO_HOME=${NARGO_HOME-"$HOME/.nargo"}
NARGO_BIN_DIR="$NARGO_HOME/bin"

main() {
  need_cmd git
  need_cmd curl

  while [[ $1 ]]; do
    case $1 in
      --)               shift; break;;

      -n|--nightly)     shift; NOIRUP_NIGHTLY="1";;
      -r|--repo)        shift; NOIRUP_REPO=$1;;
      -b|--branch)      shift; NOIRUP_BRANCH=$1;;
      -v|--version)     shift; NOIRUP_VERSION=$1;;
      -f|--features)    shift; NOIRUP_FEATURES=$1;;
      -p|--path)        shift; NOIRUP_LOCAL_REPO=$1;;
      -P|--pr)          shift; NOIRUP_PR=$1;;
      -C|--commit)      shift; NOIRUP_COMMIT=$1;;
      -h|--help)
        usage
        exit 0
        ;;
      *)
        err "internal error: unknown option "$1"\n";;
    esac; shift
  done

  # Input string is a space delimited list of features 
  # Build a string of feature flags to pass to cargo
  FEATURES=""
  if [ -n "$NOIRUP_FEATURES" ]; then
    # "aztec bn254" -> "--features aztec --features bn254"
    for feature in $NOIRUP_FEATURES; do
        FEATURES+="--features $feature "
    done
  fi

  if [ -n "$NOIRUP_PR" ]; then
    if [ -z "$NOIRUP_BRANCH" ]; then
      NOIRUP_BRANCH="refs/pull/$NOIRUP_PR/head"
    else
      err "can't use --pr and --branch at the same time"
    fi
  fi

  # Installs nargo from a local repository if --path parameter is provided
  if [[ -n "$NOIRUP_LOCAL_REPO" ]]; then
    need_cmd cargo

    # Ignore branches/versions as we do not want to modify local git state
    if [ -n "$NOIRUP_REPO" ] || [ -n "$NOIRUP_BRANCH" ] || [ -n "$NOIRUP_VERSION" ]; then
      warn "--branch, --version, and --repo arguments are ignored during local install"
    fi

    # Enter local repo and build
    say "installing from $NOIRUP_LOCAL_REPO"
    cd $NOIRUP_LOCAL_REPO
    RUSTFLAGS="-C target-cpu=native" ensure cargo build --release $FEATURES # need 4 speed

    # Remove prior installations if they exist
    rm -f "$NARGO_BIN_DIR/nargo"

    # Move the binary into the `nargo/bin` directory
    ensure mv "$PWD/target/release/nargo" "$NARGO_BIN_DIR/nargo"

    say "done"
    exit 0
  fi

  if [ -n "${NOIRUP_FEATURES}" ]; then
      echo "Warning: [-f | --features] flag has no effect when installing a prebuilt binary"
  fi

  NOIRUP_REPO=${NOIRUP_REPO-noir-lang/noir}
  if [[ "$NOIRUP_REPO" == "noir-lang/noir" && -z "$NOIRUP_BRANCH" && -z "$NOIRUP_COMMIT" ]]; then
    PLATFORM="$(uname -s)"
    case $PLATFORM in
      Linux)
        PLATFORM="unknown-linux-gnu"
        CONFIG_DIR=${XDG_CONFIG_HOME-"$HOME/.config"}
        ;;
      Darwin)
        PLATFORM="apple-darwin"
        CONFIG_DIR=${XDG_CONFIG_HOME-"$HOME/Library/Application Support"}
        ;;
      *)
        err "unsupported platform: $PLATFORM"
        ;;
    esac

    # Fetch system's architecture.
    ARCHITECTURE="$(uname -m)"

    # Align ARM naming for release fetching.
    if [ "${ARCHITECTURE}" = "arm64" ]; then
      ARCHITECTURE="aarch64" # Align release naming.
    fi

    # Reject unsupported architectures.
    if [ "${ARCHITECTURE}" != "x86_64" ] && [ "${ARCHITECTURE}" != "aarch64" ]; then
      err "unsupported architecure: $ARCHITECTURE-$PLATFORM"
    fi

    # Compute the URL of the release tarball in the Noir repository.
    if [ -z "$NOIRUP_NIGHTLY" ] && [ -z "$NOIRUP_VERSION" ]; then
      say "installing nargo (latest stable)"

      RELEASE_URL="https://github.com/${NOIRUP_REPO}/releases/latest/download"
    else
      NOIRUP_VERSION=${NOIRUP_VERSION-nightly}
      NOIRUP_TAG=$NOIRUP_VERSION

      # Normalize versions (handle channels, versions without v prefix)
      if [[ "$NOIRUP_VERSION" == [[:digit:]]* ]]; then
        # Add v prefix
        NOIRUP_VERSION="v${NOIRUP_VERSION}"
        NOIRUP_TAG="${NOIRUP_VERSION}"
      fi

      say "installing nargo (version ${NOIRUP_VERSION} with tag ${NOIRUP_TAG})"

      RELEASE_URL="https://github.com/${NOIRUP_REPO}/releases/download/${NOIRUP_TAG}"
    fi
    BIN_TARBALL_URL="${RELEASE_URL}/nargo-${ARCHITECTURE}-${PLATFORM}.tar.gz"

    # Download the binaries tarball and unpack it into the .nargo bin directory.
    say "downloading latest nargo to '$NARGO_BIN_DIR'"
    ensure curl -# -L $BIN_TARBALL_URL | tar -xzC $NARGO_BIN_DIR

    # Prior to v0.3.0, Nargo and the std lib were distributed separated.
    ensure rm -rf "$CONFIG_DIR/noir-lang/std"
    if [ -d "$NARGO_BIN_DIR/noir-lang" ]; then
      # Release tarball contains std lib so we're installing a version prior to v0.3.0.
      # Move std lib to location expected by Nargo.
      say "installing noir-lang/std lib to '$CONFIG_DIR'"
      ensure mv "$NARGO_BIN_DIR/noir-lang" "$CONFIG_DIR"
    fi
  else
    need_cmd cargo
    NOIRUP_BRANCH=${NOIRUP_BRANCH-master}
    REPO_PATH="${NARGO_HOME}/${NOIRUP_REPO}"

    if [ ! -d $REPO_PATH ]; then
      # Repo path did not exist, grab the author from the repo, make a directory in .nargo, cd to it and clone.
      IFS="/" read -ra AUTHOR <<<"$NOIRUP_REPO"
      ensure mkdir -p "$NARGO_HOME/$AUTHOR"
      cd "$NARGO_HOME/$AUTHOR"
      ensure git clone https://github.com/${NOIRUP_REPO}
    fi
    # force checkout, discarding any local changes
    cd $REPO_PATH
    ensure git fetch origin ${NOIRUP_BRANCH}:remotes/origin/${NOIRUP_BRANCH}
    ensure git checkout origin/${NOIRUP_BRANCH}
    # If set, checkout specific commit from branch
    if [ ! -z $NOIRUP_COMMIT ]; then
      say "installing at commit ${NOIRUP_COMMIT}"
      ensure git checkout ${NOIRUP_COMMIT}
    fi

    RUSTFLAGS="-C target-cpu=native" ensure cargo build --release $FEATURES

    # Remove prior installations if they exist
    rm -f "$NARGO_BIN_DIR/nargo"

    # Move the binary into the `nargo/bin` directory
    ensure mv "$PWD/target/release/nargo" "$NARGO_BIN_DIR/nargo"

  fi

  if [[ $(which nargo) =~ "cargo" ]]; then
    warn "it appears your system has already has nargo installed via cargo. you may need to run 'rm $(which nargo)' to allow noirup to take precedence!"
  fi

  say "done"
}

usage() {
  cat 1>&2 <<EOF
The installer for Nargo.
Update or revert to a specific Nargo version with ease.
USAGE:
    noirup <OPTIONS>
OPTIONS:
    -h, --help      Print help information
    -v, --version   Install a specific version
    -b, --branch    Install a specific branch
    -P, --pr        Install a specific Pull Request
    -C, --commit    Install a specific commit
    -r, --repo      Install from a remote GitHub repo (uses default branch if no other options are set)
    -p, --path      Install a local repository
    -f, --features  Activates feature flags when building from source: "feature1 feature2"
EOF
}

say() {
  printf 'noirup: %s\n' "$1"
}

warn() {
  say "warning: ${1}" >&2
}

err() {
  say "$1" >&2
  exit 1
}

need_cmd() {
  if ! check_cmd "$1"; then
    err "need '$1' (command not found)"
  fi
}

check_cmd() {
  command -v "$1" >/dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
  if ! "$@"; then err "command failed: $*"; fi
}

main "$@" || exit 1
